import mysql.connector
import json
from os import listdir
from getFileInformation import get_metadata
from os.path import isfile, join
from operator import itemgetter
import os
import re


def get_botnet_labels():
    mydb = mysql.connector.connect(
        host="localhost",
        user="",
        password="",
        database="malware",
        port='3306'
    )
    cursor = mydb.cursor()

    labels = {}

    cursor.execute("SELECT md5, threat_label FROM metadata")
    # this will extract row headers
    row_headers = [x[0] for x in cursor.description]

    results = cursor.fetchall()
    json_data = []
    for result in results:

        if(result[1] not in labels):
            labels[result[1]] = 1
        else:
            labels[result[1]] = labels[result[1]] + 1

    return labels


def insert_files():

    mydb = mysql.connector.connect(
        host="localhost",
        user="",
        password="",
        database="malware",
        port='3306'
    )
    cursor = mydb.cursor()
    path = "../VirusShare_ELF/benign/"
    onlyfiles = [f for f in listdir(path) if isfile(join(path, f))]
    print(len(onlyfiles), " files")
    m = 0
    for i, f in enumerate(onlyfiles):
        if f != '.DS_Store':  # and re.search(".elf", f):
            md5 = f.split('.')[0].split('_')[-1]
            try:
                cursor.execute(
                    "SELECT * FROM metadata WHERE md5 = '" + md5 + "'")
                retVal = cursor.fetchall()
                if len(retVal) == 0:
                    data = get_metadata(md5)
                    if data['type'] == 'ELF':
                        compilation = data['magic'].split(',')[-1].strip()
                        if re.search("not stripped", data['magic'], re.IGNORECASE):
                            compilation = "not stripped"
                        elif re.search("stripped", data['magic'], re.IGNORECASE):
                            compilation = "stripped"
                        else:
                            compilation = "not specified"
                        f_size = data['size']
                        linking = ""
                        if re.search("dynamically linked", data['magic']):
                            linking = "dynamically linked"
                        elif re.search("statically linked", data['magic']):
                            linking = "statically linked"
                        else:
                            linking = "not specified"
                        val = """
                            INSERT INTO metadata
                            VALUES(""" + "'" + data['md5'] + "', '" + data['architecture'] + "', '" + str(data['entrypoint']) + "', '" + str(data['first_submission_date']) + "', '" + str(data['last_submission_date']) + "', " + str(data['malicious_votes']) + ", '" + data['threat_label'] + f"', '{compilation}', {f_size/1000}, '{linking}') " + """
                            """
                        cursor.execute(val)
                        mydb.commit()
                        #os.rename(path + f, path + "Bazaar_" + data['md5'])
                    else:
                        print(data['md5'], data['type'])
                m = m + 1
            except Exception as err:
                print(err, " for ", md5)

        if(m % 19000 == 0 and m != 0):
            break
        if(i % 500 == 0 and i != 0):
            print(i)
    cursor.close()
    return "completed"


def get_widgets():

    mydb = mysql.connector.connect(
        host="localhost",
        user="",
        password="",
        database="malware",
        port='3306'
    )
    cursor = mydb.cursor()
    cursor.execute("SELECT * FROM metadata")

    # this will extract row headers
    row_headers = [x[0] for x in cursor.description]

    results = cursor.fetchall()
    json_data = []
    for result in results:
        json_data.append(dict(zip(row_headers, result)))

    cursor.close()

    return json.dumps(json_data)


def db_init():
    mydb = mysql.connector.connect(
        host="localhost",
        user="",
        password="",
        port='3306',
    )
    cursor = mydb.cursor()

    cursor.execute("DROP DATABASE IF EXISTS malware")
    cursor.execute("CREATE DATABASE malware")
    cursor.close()

    mydb = mysql.connector.connect(
        host="localhost",
        user="",
        password="",
        database="malware",
        port='3306'
    )
    cursor = mydb.cursor()
    cursor.execute("CREATE TABLE metadata (md5 varchar(255) NOT NULL, architecture varchar(100) NOT NULL, entrypoint varchar(100), first_submission_date varchar(25), last_submission_date varchar(25), malicious_votes int, threat_label varchar(255), PRIMARY KEY(md5))")
    cursor.close()

    return 'init database'


insert_files()
