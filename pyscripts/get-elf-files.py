import datetime
import mysql.connector
from os import listdir
import shutil
import subprocess
from os.path import isfile, join, isdir, getsize
import requests
import json
import time
from getFileInformation import get_metadata, get_magic_data
import re
import filetype

mydb = mysql.connector.connect(
    host="localhost",
    user="root",
    password="root",
    database="malware",
    port='3306'
)
cursor = mydb.cursor()

path = "../IoT-binaries/ARM/"

files = []


def get_files(folder):
    for f in listdir(folder):
        if isfile(join(folder, f)) and 'Store' not in f:
            files.append(join(folder, f))
        if isdir(join(folder, f)):
            get_files(join(folder, f))


get_files(path)
# print(len(files))
# regex = "("s

#cursor.execute("SELECT md5 from metadata WHERE architecture like 'unknown%'")
#cursor.execute("SELECT md5 from metadata WHERE linking is null")
#res = cursor.fetchall()
#count = 0
"""
for f in res:
	try:
		if re.search("Store", f[0]) == None:
			md5 = f[0]
			data = get_magic_data(f[0])
			#print(data['magic'])
			#print(data['size'])
			#s = subprocess.getstatusoutput('file ' + f)
			stripped = data['magic'].split(',')[-1].strip()
			f_size = data['size']
			if re.search("dynamically linked", data['magic']):
				strings = f"UPDATE metadata SET file_size_kb = {f_size/1000}, linking = 'dynamically linked', compilation='{stripped}' WHERE md5 = '{md5}'"
				cursor.execute(strings)
				mydb.commit()
			elif re.search("statically linked", data['magic']):
				strings = f"UPDATE metadata SET file_size_kb = {f_size/1000}, linking = 'statically linked', compilation='{stripped}' WHERE md5 = '{md5}'"
				cursor.execute(strings)
				mydb.commit()
			else:
				strings = f"UPDATE metadata SET file_size_kb = {f_size/1000}, linking = 'not specified', compilation='{stripped}' WHERE md5 = '{md5}'"
				cursor.execute(strings)
				mydb.commit()
			count = count + 1
		if count % 1000 == 0:
			print(count)
	except Exception as e:
		print(e)

for r in res:
	md5 = r[0]
	try:
		data = get_magic_data(md5)
		arch = data['magic'].split(',')[1].strip()
		file_size = float(data['size'])
		strings = f"UPDATE metadata SET architecture = 'unknown' WHERE md5 = '{md5}'"
		print(strings)
		cursor.execute(strings)
		mydb.commit()
		count = count + 1
		if count % 1000 == 0:
			print(count)
	except Exception as e:
		print(e, " for ", md5)
"""


for f in files:
    s = subprocess.getstatusoutput('file ' + f)
    print(s[1])


cursor.close()
