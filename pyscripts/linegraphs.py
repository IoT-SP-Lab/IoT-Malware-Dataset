import matplotlib.pyplot as plt
import mysql.connector
import json
from datetime import datetime, timezone
import sys
import getopt
import numpy as np
import shutil
from os import listdir
from os.path import isfile, join, isdir
import pandas as pd
import re

path = "../VirusShare_ELF/RenesasSH/"
new_path = "../VirusShare_ELF/RenesasSH/"
new_path_mirai = new_path + "Mirai/"
new_path_gafgyt = new_path + "Gafgyt/"
new_path_tsunami = new_path + "Tsunami/"
new_path_hajime = new_path + "Hajime/"
new_path_jiagu = new_path + "Jiagu/"
new_path_dnsamp = new_path + "Dnsamp/"
new_path_dofloo = new_path + "Dofloo/"
new_path_vpnfiler = new_path + "Vpnfilter/"
new_path_generica = new_path + "Generica/"
new_path_botena = new_path + "BotenaGo/"
new_path_wifatch = new_path + "Wifatch/"
new_path_rootkit = new_path + "Rootkit/"
new_path_flooder = new_path + "Flooder/"
new_path_darlloz = new_path + "Darlloz/"
new_path_mrblack = new_path + "Mrblack/"
new_path_mozi = new_path + "Mozi/"
new_path_benign = new_path + "benign/"
new_path_other = new_path + "Other/"

new_path_x86 = "../VirusShare_ELF/x86/"
new_path_arm = "../VirusShare_ELF/ARM/"
new_path_sparc = "../VirusShare_ELF/Sparc/"
new_path_mc = "../VirusShare_ELF/MC68000/"
new_path_intel = "../VirusShare_ELF/Intel80386/"
new_path_unknown = "../VirusShare_ELF/unknown/"
new_path_mips = "../VirusShare_ELF/MIPS/"
new_path_aarch64 = "../VirusShare_ELF/AArch64/"
new_path_renesas = "../VirusShare_ELF/RenesasSH/"
new_path_powerpc = "../VirusShare_ELF/PowerPC/"

onlyfiles = []


def timestamp_to_utc(timestamp):
    return datetime.utcfromtimestamp(timestamp)


def utc_to_timestamp(year, month, day):
    try:
        _date = datetime(int(year), int(month), int(day))
        utc_time = _date.replace(tzinfo=timezone.utc)
        return utc_time.timestamp()
    except:
        return -1


def format_request_date(request_date):
    year = request_date[0:4]
    month = request_date[4:6]
    day = request_date[6:8]
    return utc_to_timestamp(year, month, day)


def byday(results):

    dayresult = {}

    for result in results:
        _date = timestamp_to_utc(int(result[0])).strftime("%Y-%m-%d")
        print(_date)
        if _date not in dayresult:
            dayresult[_date] = 0
        else:
            dayresult[_date] = dayresult[_date] + 1

    return dayresult


def bymonth(results):
    return results


def dbquery(cursor, search, types, start_date, end_date):
    if types is not None and start_date is not None and end_date is not None:
        _start = format_request_date(start_date)
        _end = format_request_date(end_date)
        cursor.execute("SELECT first_submission_date FROM metadata WHERE {} LIKE '%{}%' AND first_submission_date >= '{}' AND first_submission_date <= '{}' ORDER BY first_submission_date asc".format(
            search, types, _start, _end))
    elif types is not None and end_date is not None:
        _end = format_request_date(end_date)
        cursor.execute("SELECT first_submission_date FROM metadata WHERE {} LIKE '%{}%' AND first_submission_date <= '{}' ORDER BY first_submission_date asc".format(
            search, types, _end))
    elif types is not None and start_date is not None:
        _start = format_request_date(start_date)
        cursor.execute("SELECT first_submission_date FROM metadata WHERE {} LIKE '%{}%' AND first_submission_date >= '{}' ORDER BY first_submission_date asc".format(
            search, types, _start))
    elif start_date is not None and end_date is not None and types is None:
        _start = format_request_date(start_date)
        _end = format_request_date(end_date)
        cursor.execute("SELECT first_submission_date FROM metadata WHERE first_submission_date >= '{}' AND first_submission_date <= '{}' ORDER BY first_submission_date asc".format(_start, _end))
    elif types is not None:
        cursor.execute(
            "SELECT first_submission_date FROM metadata WHERE {} LIKE '%{}%'".format(search, types))
    else:
        types.execute(
            "SELECT first_submission_date FROM metadata ORDER BY first_submission_date asc")

    return cursor.fetchall()


def by_malware_type(cursor, malware, start_date, end_date):

    results = dbquery(cursor, 'threat_label', malware, start_date, end_date)
    results1 = dbquery(cursor, '', None, start_date, end_date)
    res = byday(results)
    res1 = byday(results1)
    days = list(res.keys())
    numbers = list(res.values())
    days1 = list(res1.keys())
    numbers1 = list(res1.values())

    plt.plot(days, numbers, label="line 1")
    plt.plot(days1, numbers1, label="line 2")
    plt.title('malware by day')
    plt.xlabel('days')
    plt.ylabel('number')
    plt.legend()
    plt.show()


def dbquery_mv(cursor, types):
    cursor.execute(
        "SELECT md5 FROM metadata WHERE architecture LIKE '%{}%'".format(types))
    return cursor.fetchall()


def dbquery_arch_mv(cursor, md5):
    cursor.execute(
        "SELECT architecture FROM metadata WHERE md5 = '{}'".format(md5))
    return cursor.fetchall()


def get_files(folder):
    for f in listdir(folder):
        if isfile(join(folder, f)) and 'Store' not in f:
            onlyfiles.append(join(folder, f))
        if isdir(join(folder, f)):
            get_files(join(folder, f))


def move_by_architecture(cursor, architecture):
    get_files(path)
    print(len(onlyfiles))
    for files in onlyfiles:
        try:
            md5 = files.split('/')[-1].split("_")[-1]
            result = dbquery_arch_mv(cursor, md5)[0][0]
            if result == 'ARM':
                shutil.move(files, new_path_arm)
            elif result == 'MIPS R3000':
                shutil.move(files, new_path_mips)
            elif result == "Intel 80386":
                shutil.move(files, new_path_intel)
            elif result == "MC68000":
                shutil.move(files, new_path_mc)
            elif result == "Renesas SH":
                shutil.move(files, new_path_renesas)
            elif "PowerPC" in result:
                shutil.move(files, new_path_powerpc)
            elif result == 'Sparc':
                shutil.move(files, new_path_sparc)
            elif "X86" in result:
                shutil.move(files, new_path_x86)
            elif result == 'AArch64':
                shutil.move(files, new_path_aarch64)
            else:
                shutil.move(files, new_path_unknown)
        except Exception as err:
            print("error ", err)
            # pass


def dbquery_type_mv(cursor, md5):
    cursor.execute(
        "SELECT threat_label FROM metadata WHERE md5 = '{}'".format(md5))
    return cursor.fetchall()


def move_by_type(cursor):
    onlyfiles = [f for f in listdir(path) if isfile(join(path, f))]
    for files in onlyfiles:
        try:
            md5 = files.split('/')[-1].split('_')[-1]
            print(md5)
            result = dbquery_type_mv(cursor, md5)[0][0]
            if re.search('mirai', result, re.IGNORECASE):
                shutil.move(path+files, new_path_mirai)
            elif re.search('gafgyt', result, re.IGNORECASE):
                shutil.move(path+files, new_path_gafgyt)
            elif re.search('tsunami', result, re.IGNORECASE):
                shutil.move(path+files, new_path_tsunami)
            elif re.search('hajime', result, re.IGNORECASE):
                shutil.move(path+files, new_path_hajime)
            elif re.search('jiagu', result, re.IGNORECASE):
                shutil.move(path+files, new_path_jiagu)
            elif re.search('dnsamp', result, re.IGNORECASE):
                shutil.move(path+files, new_path_dnsamp)
            elif re.search('dofloo', result, re.IGNORECASE):
                shutil.move(path+files, new_path_dofloo)
            elif re.search('vpnfilter', result, re.IGNORECASE):
                shutil.move(path+files, new_path_vpnfiler)
            elif re.search('generica', result, re.IGNORECASE):
                shutil.move(path+files, new_path_generica)
            elif re.search('botena', result, re.IGNORECASE):
                shutil.move(path+files, new_path_botena)
            elif re.search('rootkit', result, re.IGNORECASE):
                shutil.move(path+files, new_path_rootkit)
            elif re.search('flooder', result, re.IGNORECASE):
                shutil.move(path+files, new_path_flooder)
            elif re.search('darlloz', result, re.IGNORECASE):
                shutil.move(path+files, new_path_darlloz)
            elif re.search('mrblack', result, re.IGNORECASE):
                shutil.move(path+files, new_path_mrblack)
            elif re.search('mozi', result, re.IGNORECASE):
                shutil.move(path+files, new_path_mozi)
            elif re.search('benign', result, re.IGNORECASE):
                shutil.move(path+files, new_path_benign)
            else:
                shutil.move(path+files, new_path_other)
        except Exception as err:
            print(err)


def create_linegraph(cursor):
    cursor.execute(
        "SELECT first_submission_date from metadata order by first_submission_date asc")

    res = [datetime.utcfromtimestamp(int(result[0])).replace(
        second=0, hour=0, minute=0) for result in cursor.fetchall()]
    res_pd = pd.DataFrame(res, columns=['first_submission_date'])
    res_pd['WeekDate'] = res_pd.apply(
        lambda row: row['first_submission_date'] - pd.to_timedelta(7, unit='d'), axis=1)
    perweek = res_pd['WeekDate'].groupby(res_pd['WeekDate']).count()
    perweek = perweek.to_frame()
    perweek = perweek.resample('M').sum()
    x = []
    y = []
    for item, j in zip(perweek.index, range(perweek.index.values.size)):
        x.append(item)
        y.append(perweek.iloc[j][0])

    # print(x)
    mirai = pd.to_datetime('2016-08-31')
    gafgyt = pd.to_datetime('2014-03-22')
    mozi = pd.to_datetime('2019-10-01')
    tsunami = pd.to_datetime('2010-05-24')
    botenago = pd.to_datetime('2021-10-10')
    hydra = pd.to_datetime('2008-03-01')
    plt.plot(x, y)
    plt.plot(mirai, 3550, marker="o", markersize=5)
    plt.annotate("Mirai", (mirai+pd.to_timedelta(35, unit='d'), 3500))
    plt.plot(gafgyt, 3550, marker="o", markersize=5)
    plt.annotate("Gafyt", (gafgyt+pd.to_timedelta(35, unit='d'), 3500))
    plt.plot(mozi, 3550, marker="o", markersize=5)
    plt.annotate("Mozi", (mozi+pd.to_timedelta(35, unit='d'), 3500))
    plt.plot(tsunami, 3550, marker="o", markersize=5)
    plt.annotate("Tsunami", (tsunami+pd.to_timedelta(35, unit='d'), 3500))
    plt.plot(botenago, 3550, marker="o", markersize=5)
    plt.annotate("BotenaGo", (botenago+pd.to_timedelta(35, unit='d'), 3500))
    plt.plot(hydra, 3550, marker="o", markersize=5)
    plt.annotate("Hydra", (hydra+pd.to_timedelta(35, unit='d'), 3500))
    plt.xlabel("Time")
    plt.ylabel("Count")
    plt.show()


def by_architecture_type(cursor, arch, start_date, end_date):

    results = dbquery(cursor, 'architecture', arch, start_date, end_date)

    res = byday(results)
    days = list(res.keys())
    numbers = list(res.values())

    plt.plot(days, numbers)
    plt.title('architecture by day')
    plt.xlabel('days')
    plt.ylabel('number')
    plt.yticks(np.arange(0, 6000, 500))
    plt.show()


def main(argv):

    mydb = mysql.connector.connect(
        host="localhost",
        user="root",
        password="root",
        database="malware",
        port='3306'
    )
    cursor = mydb.cursor()

    opts, args = getopt.getopt(argv, "t:s:e:f:j:")
    search_type = ""
    start_date = ""
    end_date = ""
    search_filter = ""

    for opt, arg in opts:
        if opt in ['-t']:
            search_type = arg
        elif opt in ['-s']:
            start_date = arg
        elif opt in ['-e']:
            end_date = arg
        elif opt in ['-f']:
            search_filter = arg
        elif opt in ['-j']:
            test()
        else:
            print("Unknown option")

    if search_type == "architecture":
        by_architecture_type(cursor, search_filter, start_date, end_date)
    elif search_type == "architecture2":
        move_by_architecture(cursor, search_filter)
    elif search_type == "type":
        move_by_type(cursor)
    elif search_type == "malware":
        by_malware_type(cursor, search_filter, start_date, end_date)
    elif search_type == "line":
        create_linegraph(cursor)


if __name__ == "__main__":
    main(sys.argv[1:])
